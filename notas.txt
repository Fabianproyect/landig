# API Integration Guide for Professional Portal - MizapTech

## Base URL: https://site.mizaptech.site/api

## Authentication
- Store JWT token in localStorage after login
- Include token in Authorization header for protected endpoints: "Bearer <token>"

## User Endpoints (for profile management)

1. GET /users/profesionales
- Purpose: Get list of all professionals (for client selection)
- Used in: 
  - "Añadir Trabajo" modal (client dropdown)
  - Professional directory view
- Response format: Array of professional objects with details

2. GET /users/<usuario_id>
- Purpose: Get specific user details
- Used in: 
  - Profile modal (pre-fill form)
  - Displaying client details
- Response: User object with public details

3. PUT /users/<usuario_id>
- Purpose: Update professional profile
- Used in: Profile modal submit
- Required fields: nombre_completo, especialidad, descripcion, ciudad, telefono

4. POST /users/<usuario_id>/upload-photo
- Purpose: Upload profile photo
- Used in: Profile photo update
- Content-Type: multipart/form-data
- File field: 'foto'

## Work (Citas) Endpoints

1. GET /trabajos/usuario/<usuario_id>
- Purpose: Get all appointments for current professional
- Used in: "Citas" tab to display upcoming appointments
- Filter: estado != 'eliminado'
- Returns: Array of appointment objects

2. POST /trabajos/
- Purpose: Create new appointment
- Used in: "Añadir Trabajo" modal submit
- Required fields:
  - titulo: Work title
  - descripcion: Work description
  - cliente_id: Client ID (from dropdown)
  - profesional_id: Current user ID
- Returns: Created appointment object

3. PUT /trabajos/<trabajo_id>
- Purpose: Update appointment status/details
- Used in:
  - "Confirmar" button in appointments
  - Marking appointments as completed
- Updateable fields: estado, calificacion, comentario_profesional

4. GET /trabajos/profesional/<profesional_id>
- Purpose: Get professional's portfolio works
- Used in: "Mi Portafolio" tab
- Returns: Array of work objects with client details

## Integration with Provided HTML View

### 1. Initial Load
- On DOMContentLoaded:
  - Verify auth token exists
  - GET /users/<current_user_id> to load profile data
  - GET /trabajos/profesional/<current_user_id> for portfolio
  - GET /trabajos/usuario/<current_user_id> for appointments
  - GET /users/profesionales for client dropdown

### 2. Profile Modal
- On open: Pre-fill form with current user data
- On submit: PUT /users/<current_user_id> with form data
- Photo upload: POST /users/<current_user_id>/upload-photo

### 3. Appointments Tab
- Display data from GET /trabajos/usuario/<current_user_id>
- "Confirmar" button: PUT /trabajos/<cita_id> with {estado: 'confirmada'}

### 4. Add Work Modal
- Client dropdown: Populated from GET /users/profesionales
- On submit: POST /trabajos/ with form data

### 5. Portfolio Tab
- Display data from GET /trabajos/profesional/<current_user_id>
- Filter by estado='completado' for finished works

### 6. PDF Generation
- Use same data as Appointments tab (GET /trabajos/usuario/<current_user_id>)
- Format as PDF using jsPDF

## Sample API Calls

// Get professional's appointments
fetch(`${API_BASE_URL}/trabajos/usuario/${currentUser.id}`, {
  headers: {
    'Authorization': `Bearer ${authToken}`
  }
})

// Create new appointment
fetch(`${API_BASE_URL}/trabajos/`, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${authToken}`
  },
  body: JSON.stringify({
    titulo: 'Nuevo tatuaje',
    descripcion: 'Diseño de manga completa',
    cliente_id: selectedClientId,
    profesional_id: currentUser.id
  })
})

// Update profile
fetch(`${API_BASE_URL}/users/${currentUser.id}`, {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${authToken}`
  },
  body: JSON.stringify({
    nombre_completo: 'Nuevo Nombre',
    especialidad: 'tatuador',
    descripcion: 'Nueva biografía...'
  })
})